networks: 
  microservices-node-kotlin-monorepo_default: 
    driver: bridge 

services:
  reverse-proxy:
    build: ./nginx
    volumes:
      - ./templates:/etc/nginx/templates
    ports:
      - "8080:80"
    networks:
      - microservices-node-kotlin-monorepo_default
    environment:
      - NGINX_HOST=microservices-node-kotlin-monorepo-reverse-proxy-1.com
      - NGINX_PORT=80
    depends_on:
      - akhq

  db:
    image: postgres
    volumes:
      - ./teste.sql:/docker-entrypoint-initdb.d/teste.sql
    restart: always
    command: -p 7895
    expose:
      - "7895"  
    networks:
      - microservices-node-kotlin-monorepo_default
    environment:
      POSTGRES_PASSWORD: admin
  
  adminer:
    image: adminer
    restart: always
    networks:
      - microservices-node-kotlin-monorepo_default
    expose:
      - "8080"

  akhq:
    
    # build:
    #   context: .
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "microservices-node-kotlin-monorepo-kafka-1:9092"
              schema-registry:
                url: "http://microservices-node-kotlin-monorepo-schema-registry-1:8085"
              connect:
                - name: "connect"
                  url: "http://microservices-node-kotlin-monorepo-connect-1:8083"
    expose:
      - "8080"
    links:
      - kafka
      - schema-registry
    networks:
      - microservices-node-kotlin-monorepo_default
    depends_on:
      - kafka
      - schema-registry


  zookeeper:
      image: confluentinc/cp-zookeeper
      networks:
      - microservices-node-kotlin-monorepo_default
      volumes:
        - zookeeper-data:/var/lib/zookeeper/data:Z
        - zookeeper-log:/var/lib/zookeeper/log:Z
      environment:
        ZOOKEEPER_CLIENT_PORT: '2181'
        ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
      expose:
        - "2181"

  kafka:
    image: confluentinc/cp-kafka
    networks:
      - microservices-node-kotlin-monorepo_default
    volumes:
      - kafka-data:/var/lib/kafka/data:Z
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://microservices-node-kotlin-monorepo-kafka-1:29092,EXTERNAL://microservices-node-kotlin-monorepo-kafka-1:9092
      KAFKA_NUM_PARTITIONS: '12'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_COMPRESSION_TYPE: 'gzip'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_JMX_PORT: '9091'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_ALLOW_PLAINTEXT_LISTENER: 'true'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
    links:
      - zookeeper
    expose:
      - "9092"
      - "9091"

  schema-registry:
    networks:
        - microservices-node-kotlin-monorepo_default
    image: confluentinc/cp-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://microservices-node-kotlin-monorepo-kafka-1:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
    expose:
      - "8085"

  connect:
    networks:
      - microservices-node-kotlin-monorepo_default
    image: confluentinc/cp-kafka-connect
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'microservices-node-kotlin-monorepo-kafka-1:9092'
      CONNECT_REST_PORT: '8083'
      CONNECT_REST_LISTENERS: 'http://0.0.0.0:8083'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'
      CONNECT_CONFIG_STORAGE_TOPIC: '__connect-config'
      CONNECT_OFFSET_STORAGE_TOPIC: '__connect-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: '__connect-status'
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://microservices-node-kotlin-monorepo-schema-registry-1:8085'
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://microservices-node-kotlin-monorepo-schema-registry-1:8085'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'
    expose:
      - "8083"

  ksqldb:
    networks:
      - microservices-node-kotlin-monorepo_default
    image: confluentinc/cp-ksqldb-server
    depends_on:
      - kafka
      - connect
      - schema-registry
    expose:
      - "8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: 'microservices-node-kotlin-monorepo-kafka-1:9092'
      KSQL_LISTENERS: 'http://0.0.0.0:8088'
      KSQL_KSQL_SERVICE_ID: 'ksql'
      KSQL_KSQL_SCHEMA_REGISTRY_URL: 'http://microservices-node-kotlin-monorepo-schema-registry-1:8085'
      KSQL_KSQL_CONNECT_URL: 'http://microservices-node-kotlin-monorepo-connect-1:8083'
      KSQL_KSQL_SINK_PARTITIONS: '1'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: '1'
  
volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local
  kafka-data1:
    driver: local
  ui-modules:
    driver: local
  ui-build:
    driver: local

